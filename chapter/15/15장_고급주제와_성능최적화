### 예외 처리
- JPA를 사용할 때 발생하는 다양한 예외와 예외에 따른 주의점
**트랜잭션 롤백 시 주의사항**
- Spring 프레임워크 처리: OSIV처럼 영속성 컨텍스트 범위를 트랜잭션보다 크게 사용할 때
문제가 발생한 트랜잭션을 롤백하더라도 다른 트랜잭션에서 영속성 컨텍스트를
사용할 가능성이 있습니다. 하지만 이럴 경우 롤백이 영속성 컨텍스트를 포함하도록
범위를 지정해주기 때문에 예방해줍니다.

### 엔티티 비교
- 엔티티를 비교할 때 주의점과 해결 방법을 설명
**애플리케이션 수준의 반복 가능한 읽기**
- 엔티티 조회 시 항상 같은 엔티티 인스턴스 반환(동등성;equals 비교 수준이 아닌
정말 주소값이 같은 동일성 인스턴스를 반환합니다.)
```java
Member member1 = em.find(Member.class, "1L");
Member member2 = em.find(Member.class, "1L");
```
- DB 동등성 비교(@Id 식별자를 비교)를 이용합니다.

### 프록시 심화 주제
- 프록시로 인해 발생하는 다양한 문제점과 해결방법을 다룸

1) 영속성 컨텍스트와 프록시
- 영속성 컨텍스트는 관리하는 영속 엔티티의 `동일성(Identity)`을 보장합니다. 
그럼 `프록시`로 조회한 엔티티의 동일성도 보장할까요?
    - 비교 대상이 원본 엔티티의 경우엔 `==`으로 비교가 가능하지만
  프록시라면 `instanceOf`를 사용해야 합니다. 왜냐하면 원본 엔티티를
  상속받았기 때문입니다.
    - 멤버변수에 접근하려면 또한 Getter를 사용합니다.
    - 상속관계 시 부모 엔티티 기반으로만 프록시가 생성되기 때문에
  `프록시 벗기기` 처리가 필요합니다.
      - hibernate의 unproxy 사용, Vistor(비지터) 패턴






### 성능 최적화
- 